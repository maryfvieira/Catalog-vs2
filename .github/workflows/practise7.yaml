name: Practise7

on:
  push:
    branches:
      - main

env:
  MONGODB_PORT: 27017
  MONGO_DB_TIMEOUT: 15000
  MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
  MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
  PORT: 3000
  MONGODB_REPLICA_SET: test-rs
  MONGO_DB: curso_git

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Output info
        run: echo "githubactions $GITHUB_ACTIONS"

      - name: Git checkout
        uses: actions/checkout@v4

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Check if MongoDB container is already running
        id: check-mongo
        run: |
          if docker ps --format '{{.Names}}' | grep -q "^mongodb$"; then
            echo "MongoDB container já está rodando."
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "MongoDB container não está rodando."
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Start MongoDB
        if: steps.check-mongo.outputs.found == 'false'
        uses: supercharge/mongodb-github-action@1.12.0
        with:
          mongodb-version: '7.0'
          mongodb-db: ${{ env.MONGO_DB }}
          mongodb-replica-set: ${{ env.MONGODB_REPLICA_SET }}
          mongodb-port: ${{ env.MONGODB_PORT }}

      - name: Install mongosh
        run: |
          curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
          echo "deb [signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh

      - name: Check mongosh version
        run: mongosh --version

      - name: Ensure MongoDB user and database exist
        run: |
          echo "👷 Criando usuário, senha e banco curso_git manualmente (idempotente)..."
          mongosh "mongodb://localhost:$MONGODB_PORT" <<EOF
          use $MONGO_DB;
          db.getUser("$MONGODB_USERNAME") || db.createUser({
            user: "$MONGODB_USERNAME",
            pwd: "$MONGODB_PASSWORD",
            roles: [{ role: "readWrite", db: "$MONGO_DB" }]
          });
          EOF

      - name: Test MongoDB connection
        run: |
          echo "⏳ Testando conexão com MongoDB..."
          for i in {1..10}; do
            mongosh "mongodb://$MONGODB_USERNAME:$MONGODB_PASSWORD@localhost:$MONGODB_PORT/$MONGO_DB?authSource=$MONGO_DB&replicaSet=$MONGODB_REPLICA_SET" --eval "db.stats()" && break
            echo "Aguardando MongoDB iniciar ($i/10)..."
            sleep 3
          done

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build project
        run: |
          npm run build
          npx tsc-alias -v

      - name: Run unit tests with mock
        id: unit-tests
        env:
          NODE_ENV: test
          CI: true
        run: npm run test

      - name: Run e2e tests
        id: e2e-tests
        continue-on-error: true
        env:
          NODE_ENV: test
          CI: true
          DATABASE_URL: mongodb://${{ env.MONGODB_USERNAME }}:${{ env.MONGODB_PASSWORD }}@localhost:${{ env.MONGODB_PORT }}/${{ env.MONGO_DB }}?authSource=${{ env.MONGO_DB }}&replicaSet=${{ env.MONGODB_REPLICA_SET }}
        run: | 
          echo "📌 DATABASE_URL: $DATABASE_URL"
          echo "🚀 Executando testes e2e..."
          npm run test:e2e

      # - name: Generate report if e2e fail
      #   id: generate-report
       
        # # if: steps.e2e-tests.outcome == 'failure'
        # run: |
        #   echo "❗ Testes e2e falharam — gerando relatório Playwright..."
        #   npx playwright show-report --quiet

      - name: Upload Playwright report
        if: ${{ env.GITHUB_ACTIONS == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

      # - name: Fail job if e2e failed
      #   if: steps.e2e-tests.outcome == 'failure'
      #   run: exit 1
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build website
        id: build-website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist

  deploy:
    needs: build
    uses: ./.github/workflows/practise-deploy-reusable.yaml
    with:
      artifact-name: dist-files
    # secrets:
      # some-secret: ${{ secrets.some-secret }}
  print-deploy-result:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Print deploy output
        run: echo "${{ needs.deploy.outputs.result }}"
