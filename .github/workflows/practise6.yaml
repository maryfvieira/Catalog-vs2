name: Practise6

on:
  push:
    branches:
      - main

env:
  MONGODB_PORT: 27017
  MONGO_DB_TIMEOUT: 15000
  PORT: 3000
  MONGODB_CLUSTER_ADDRESS: localhost
  MONGODB_USERNAME: user
  MONGODB_PASSWORD: 123456
  MONGODB_DB_NAME: curso_git

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --name mongodb
          --entrypoint mongod
          mongo:6.0
          --replSet rs0
          --bind_ip_all

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v3

      - name: Instala Mongo Shell (mongosh)
        run: |
          curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
          echo "deb [ signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh

      - name: Inicializa o Replica Set do Mongo
        run: |
          echo "‚è≥ Aguardando MongoDB iniciar..."
          for i in {1..20}; do
            mongosh --quiet --eval "db.adminCommand('ping')" localhost:27017 && break
            echo "Tentando conex√£o... ($i)"
            sleep 2
          done

          echo "üîß Inicializando Replica Set..."
          mongosh --quiet --eval "rs.initiate({
            _id: 'rs0',
            members: [ { _id: 0, host: 'localhost:27017' } ]
          })"

          sleep 5

          echo "üë§ Criando usu√°rio de autentica√ß√£o..."
          mongosh --quiet --eval "
            use curso_git;
            db.createUser({
              user: 'user',
              pwd: '123456',
              roles: [ { role: 'readWrite', db: 'curso_git' } ]
            });
          "

      - name: Define vari√°veis de ambiente
        run: |
          echo "DATABASE_URL=mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@${MONGODB_CLUSTER_ADDRESS}:${MONGODB_PORT}/${MONGODB_DB_NAME}?authSource=${MONGODB_DB_NAME}&replicaSet=rs0" >> $GITHUB_ENV

      - name: Configura Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache depend√™ncias
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Instala depend√™ncias
        run: npm ci

      - name: Build do projeto
        run: |
          npm run build
          npx tsc-alias -v

      - name: Healthcheck da API
        run: |
          echo "‚åõ Aguardando rota de healthcheck..."
          for i in {1..30}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health)
            if [ "$status" -eq 200 ]; then
              echo "‚úÖ Healthcheck OK"
              break
            fi
            echo "Tentativa $i: aguardando..."
            sleep 1
          done

          if [ "$status" -ne 200 ]; then
            echo "‚ùå Healthcheck falhou ap√≥s 30s"
            exit 1
          fi

      - name: Executa testes E2E
        run: bash scripts/run-e2e.sh
        env:
          PORT: ${{ env.PORT }}
          NODE_ENV: test
          CI: true
          DATABASE_URL: ${{ env.DATABASE_URL }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Exibe mensagem de deploy
        run: echo "üöÄ Deploy iniciado (simulado)"
